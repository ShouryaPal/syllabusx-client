"use client";

import dynamic from "next/dynamic";
import { TMockSchema } from "@/lib/schemas";
import { StyleSheet } from '@react-pdf/renderer';
import { Button } from "./ui/button";
import { AlertTriangle, Download, Loader2 } from "lucide-react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "./ui/tooltip";

const Document = dynamic(
    () => import("@react-pdf/renderer").then((mod) => mod.Document),
    { ssr: false }
);
const Page = dynamic(
    () => import("@react-pdf/renderer").then((mod) => mod.Page),
    { ssr: false }
);
const Text = dynamic(
    () => import("@react-pdf/renderer").then((mod) => mod.Text),
    { ssr: false }
);
const View = dynamic(
    () => import("@react-pdf/renderer").then((mod) => mod.View),
    { ssr: false }
);
const PDFDownloadLink = dynamic(
    () => import("@react-pdf/renderer").then((mod) => mod.PDFDownloadLink),
    { ssr: false }
);

const styles = StyleSheet.create({
    page: {
        padding: 30,
        fontSize: 12,
    },
    header: {
        marginBottom: 15,
        textAlign: "center",
    },
    title: {
        fontSize: 18,
        fontWeight: "bold",
        marginBottom: 10,
    },
    metadata: {
        marginBottom: 15,
    },
    metadataRow: {
        flexDirection: "row",
        marginBottom: 5,
    },
    question: {
        marginBottom: 15,
    },
    questionHeader: {
        flexDirection: "row",
        marginBottom: 5,
    },
    subQuestion: {
        marginLeft: 20,
        marginBottom: 5,
    },
    watermark: {
        position: "absolute",
        top: 10,
        right: 30,
        fontSize: 8,
        color: "#666",
    },
});

export const MockPDF = ({ data }: { data: TMockSchema }) => {
    const timestamp = new Date().toLocaleString("en-IN", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        hour12: false,
    });

    return (
        <Document>
            <Page size="A4" style={styles.page}>
                <View style={styles.header}>
                    <Text style={styles.title}>
                        {data.output.examMetadata.subject} -{" "}
                        {data.output.examMetadata.type === "midSem" ? "Mid Semester" : "End Semester"} Examination
                    </Text>
                </View>

                <View style={styles.metadata}>
                    <View style={styles.metadataRow}>
                        <Text>Total Marks: {data.output.examMetadata.totalMarks}</Text>
                    </View>
                    <View style={styles.metadataRow}>
                        <Text>Duration: {data.output.examMetadata.duration}</Text>
                    </View>
                    <View style={styles.metadataRow}>
                        <Text>
                            Questions to Attempt: {data.output.examMetadata.questionsToAttempt} out of{" "}
                            {data.output.examMetadata.totalQuestions}
                        </Text>
                    </View>
                </View>

                {data.output.questions.map((question) => (
                    <View key={question.questionNumber} style={styles.question}>
                        <View style={styles.questionHeader}>
                            <Text>Q{question.questionNumber}. </Text>
                            {question.isCompulsory && <Text>(Compulsory) </Text>}
                            {question.alternativeQuestionNumber && (
                                <Text>(OR Q{question.alternativeQuestionNumber}) </Text>
                            )}
                            <Text>[{question.totalMarks} Marks]</Text>
                        </View>

                        {question.content.map((subQ, idx) => (
                            <View key={idx} style={styles.subQuestion}>
                                <Text>
                                    {String.fromCharCode(97 + idx)}. {subQ.subQuestion} [{subQ.marks} Marks]
                                </Text>
                            </View>
                        ))}
                    </View>
                ))}

                <Text style={styles.watermark}>Generated By SyllabusX on {timestamp}</Text>
            </Page>
        </Document>
    )
}

export const PDFDownloadButton = ({ data }: { data: TMockSchema }) => {
    return (
        <PDFDownloadLink
            document={<MockPDF data={data} />}
            fileName={`${data.output.examMetadata.subject}_${data.output.examMetadata.type}_${new Date().toLocaleString(
                "en-IN",
                {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                    hour: "2-digit",
                    minute: "2-digit",
                    hour12: false,
                }
            )}_exam.pdf`}
        >
            {/* @ts-ignore */}
            {({ blob, url, loading, error }) => {
                if (loading) {
                    return (
                        <Button disabled variant="outline" size="icon">
                            <Loader2 className="h-4 w-4" />
                        </Button>
                    );
                }
                if (blob || url) {
                    return (
                        <Button variant="default" size="icon">
                            <Download className="h-4 w-4" />
                        </Button>
                    );
                }
                if (error) {
                    return (
                        <TooltipProvider>
                            <Tooltip>
                                <TooltipTrigger asChild>
                                    <Button size="icon" variant="outline">
                                        <AlertTriangle className="h-4 w-4" />
                                    </Button>
                                </TooltipTrigger>
                                <TooltipContent>Couldn&apos;t create PDF.</TooltipContent>
                            </Tooltip>
                        </TooltipProvider>
                    );
                }
                return <></>;
            }}
        </PDFDownloadLink>
    );
};
