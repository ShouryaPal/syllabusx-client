"use client";

import jsPDF from "jspdf";
import { TMockSchema } from "@/lib/schemas";
import { Button } from "./ui/button";
import { Download, Loader2 } from "lucide-react";

export const PDFDownloadButton = ({ data }: { data: TMockSchema }) => {
    const generatePDF = () => {
        const doc = new jsPDF();

        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();
        const margin = 20;
        const maxWidth = pageWidth - margin * 2;

        let y = margin;

        const timestamp = new Date().toLocaleString("en-IN", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
            hour12: false,
        });

        doc.setFontSize(8);
        doc.setTextColor(100);

        const watermarkText = `Generated By SyllabusX on ${timestamp}`;
        const watermarkWidth =
            doc.getStringUnitWidth(watermarkText) * 8 * 0.352778;
        doc.text(watermarkText, pageWidth - margin - watermarkWidth - 10, margin - 10);

        doc.setTextColor(0);

        const addWrappedText = (
            text: string,
            x: number,
            fontSize: number = 12,
            isBold: boolean = false,
            indent: number = 0
        ) => {
            doc.setFontSize(fontSize);
            doc.setFont("helvetica", isBold ? "bold" : "normal");
            const effectiveWidth = maxWidth - indent;
            const textLines = doc.splitTextToSize(text, effectiveWidth);
            if (y + textLines.length * (fontSize * 0.5) > pageHeight - margin) {
                doc.addPage();
                y = margin;
            }
            if (Array.isArray(textLines)) {
                textLines.forEach((line) => {
                    doc.text(line, x + indent, y);
                    y += fontSize * 0.5;
                });
            } else {
                doc.text(textLines, x + indent, y);
                y += fontSize * 0.5;
            }

            return y;
        };
        y = addWrappedText(
            `${data.output.examMetadata.subject} - ${
                data.output.examMetadata.type === "midSem"
                    ? "Mid Semester"
                    : "End Semester"
            } Examination`,
            margin,
            18,
            true
        );
        y += 10;
        y = addWrappedText(
            `Total Marks: ${data.output.examMetadata.totalMarks}`,
            margin
        );
        y = addWrappedText(
            `Duration: ${data.output.examMetadata.duration}`,
            margin
        );
        y = addWrappedText(
            `Questions to Attempt: ${data.output.examMetadata.questionsToAttempt} out of ${data.output.examMetadata.totalQuestions}`,
            margin
        );
        y += 5;
        data.output.questions.forEach((question) => {
            const questionText = `Q${question.questionNumber}. ${
                question.isCompulsory ? "(Compulsory) " : ""
            }${
                question.alternativeQuestionNumber
                    ? `(OR Q${question.alternativeQuestionNumber}) `
                    : ""
            }[${question.totalMarks} Marks]`;

            y = addWrappedText(questionText, margin, 12, true);

            question.content.forEach((subQ, idx) => {
                const subQuestionText = `${String.fromCharCode(97 + idx)}. ${subQ.subQuestion} [${subQ.marks} Marks]`;
                y = addWrappedText(subQuestionText, margin, 12, false, 10);
                y += 1;
            });

            y += 5;
        });

        const filename = `${data.output.examMetadata.subject}_${
            data.output.examMetadata.type
        }_${timestamp.replace(/[/: ]/g, "-")}_exam.pdf`;

        doc.save(filename);
    };

    return (
        <Button variant="default" size="icon" onClick={generatePDF}>
            <Download className="h-4 w-4" />
        </Button>
    );
};
